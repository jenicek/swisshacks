name: Frontend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Build and deploy static frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Get AWS infrastructure outputs
        id: tf-outputs
        working-directory: ./terraform
        run: |
          terraform init
          echo "BUCKET_NAME=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
          echo "CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "API_URL=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT

      - name: Build frontend with production API URL
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: https://${{ steps.tf-outputs.outputs.API_URL }}
        run: |
          npm run build

      - name: Deploy frontend to S3
        run: |
          aws s3 sync ./frontend/out/ s3://${{ steps.tf-outputs.outputs.BUCKET_NAME }}/ --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.tf-outputs.outputs.CLOUDFRONT_ID }} --paths "/*"