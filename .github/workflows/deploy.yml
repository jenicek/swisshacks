name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  TF_VERSION: 1.11.1

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./docker/backend.Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/swisshacks-dev-backend:latest
            ${{ steps.login-ecr.outputs.registry }}/swisshacks-dev-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Create terraform.tfvars
        working-directory: ./terraform
        run: |
          cat > terraform.tfvars << EOF
          aws_region = "${{ env.AWS_REGION }}"
          environment = "dev"
          project_name = "swisshacks"
          aws_access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws_secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          db_username = "${{ secrets.DB_USERNAME }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          create_oidc_provider = true
          github_org = "${{ github.repository_owner }}"
          github_repo = "swisshacks"
          EOF

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var-file=terraform.tfvars

      - name: Terraform Apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Update ECS Service
        if: github.ref == 'refs/heads/main'
        run: |
          aws ecs update-service --cluster swisshacks-dev-cluster --service swisshacks-dev-backend-service --force-new-deployment

      # Build and deploy static frontend
      - name: Setup Node.js
        if: github.ref == 'refs/heads/main'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        if: github.ref == 'refs/heads/main'
        working-directory: ./frontend
        run: npm install

      - name: Get AWS infrastructure outputs
        if: github.ref == 'refs/heads/main'
        id: tf-outputs
        working-directory: ./terraform
        run: |
          echo "BUCKET_NAME=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
          echo "CLOUDFRONT_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "API_URL=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT

      - name: Build frontend with production API URL
        if: github.ref == 'refs/heads/main'
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://${{ steps.tf-outputs.outputs.API_URL }}
        run: |
          npm run build

      - name: Deploy frontend to S3
        if: github.ref == 'refs/heads/main'
        run: |
          aws s3 sync ./frontend/out/ s3://${{ steps.tf-outputs.outputs.BUCKET_NAME }}/ --delete

      - name: Invalidate CloudFront cache
        if: github.ref == 'refs/heads/main'
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.tf-outputs.outputs.CLOUDFRONT_ID }} --paths "/*"
